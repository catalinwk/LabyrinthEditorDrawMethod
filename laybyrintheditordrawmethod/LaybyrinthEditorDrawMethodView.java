/*
 * LaybyrinthEditorDrawMethodView.java
 */

package laybyrintheditordrawmethod;

import java.awt.Color;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;

import javax.swing.*;
import java.awt.*;


import java.awt.Graphics;
import java.awt.Graphics2D;

/**
 * author: Catalin Mazilu
 * Creates the GUI for Labyrinth Editor
 */
public class LaybyrinthEditorDrawMethodView extends FrameView {
    /**
     * Labyrinth cell constants
     */
    final int WALL_CELL = 1;
    final int START_CELL = -1;
    final int FREE_CELL = 0;
    final int FINISH_CELL = 2;
    
    /**
     * Selected cell type to be used in the labyrinth
     */
    int selectedCellType=0;
    
    
    public LaybyrinthEditorDrawMethodView(SingleFrameApplication app) {
        super(app);

        initComponents();
        
     

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    
    
        labyrinthPanel.setLayout(new FlowLayout());
        //labyrinthPanel.setLayout(null);
        
        LabyrinthImage li = new LabyrinthImage();
                
        labyrinthPanel.add(li,0,0);
    
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = LaybyrinthEditorDrawMethodApp.getApplication().getMainFrame();
            aboutBox = new LaybyrinthEditorDrawMethodAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        LaybyrinthEditorDrawMethodApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        labyrinthPanel = new javax.swing.JPanel();
        wallCellButton = new javax.swing.JButton();
        startCellButton = new javax.swing.JButton();
        freeCellButton = new javax.swing.JButton();
        finishCellButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        labyrinthPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labyrinthPanel.setMaximumSize(new java.awt.Dimension(405, 405));
        labyrinthPanel.setMinimumSize(new java.awt.Dimension(405, 405));
        labyrinthPanel.setName("labyrinthPanel"); // NOI18N
        labyrinthPanel.setPreferredSize(new java.awt.Dimension(405, 405));
        labyrinthPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labyrinthPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout labyrinthPanelLayout = new javax.swing.GroupLayout(labyrinthPanel);
        labyrinthPanel.setLayout(labyrinthPanelLayout);
        labyrinthPanelLayout.setHorizontalGroup(
            labyrinthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 403, Short.MAX_VALUE)
        );
        labyrinthPanelLayout.setVerticalGroup(
            labyrinthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 403, Short.MAX_VALUE)
        );

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(laybyrintheditordrawmethod.LaybyrinthEditorDrawMethodApp.class).getContext().getResourceMap(LaybyrinthEditorDrawMethodView.class);
        wallCellButton.setBackground(resourceMap.getColor("wallCellButton.background")); // NOI18N
        wallCellButton.setText(resourceMap.getString("wallCellButton.text")); // NOI18N
        wallCellButton.setBorder(null);
        wallCellButton.setName("wallCellButton"); // NOI18N
        wallCellButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wallCell(evt);
            }
        });

        startCellButton.setText(resourceMap.getString("startCellButton.text")); // NOI18N
        startCellButton.setToolTipText(resourceMap.getString("startCellButton.toolTipText")); // NOI18N
        startCellButton.setName("startCellButton"); // NOI18N
        startCellButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startCellButtonMouseClicked(evt);
            }
        });

        freeCellButton.setText(resourceMap.getString("freeCellButton.text")); // NOI18N
        freeCellButton.setName("freeCellButton"); // NOI18N
        freeCellButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                freeCellButtonMouseClicked(evt);
            }
        });

        finishCellButton.setText(resourceMap.getString("finishCellButton.text")); // NOI18N
        finishCellButton.setToolTipText(resourceMap.getString("finishCellButton.toolTipText")); // NOI18N
        finishCellButton.setName("finishCellButton"); // NOI18N
        finishCellButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                finishCellButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labyrinthPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(freeCellButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wallCellButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startCellButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(finishCellButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(84, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labyrinthPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(wallCellButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(freeCellButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startCellButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(finishCellButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(88, Short.MAX_VALUE))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(laybyrintheditordrawmethod.LaybyrinthEditorDrawMethodApp.class).getContext().getActionMap(LaybyrinthEditorDrawMethodView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 452, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

private void wallCell(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wallCell
    // TODO add your handling code here:
    resetSelectionCell();
    this.wallCellButton.setBackground(Color.red);
    this.selectedCellType=1;
    
}//GEN-LAST:event_wallCell

private void freeCellButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_freeCellButtonMouseClicked
    // TODO add your handling code here:
    resetSelectionCell();
    this.freeCellButton.setBackground(Color.red);
    
    this.selectedCellType=0;

}//GEN-LAST:event_freeCellButtonMouseClicked

private void startCellButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startCellButtonMouseClicked
    // TODO add your handling code here:
    resetSelectionCell();
    this.startCellButton.setBackground(Color.red);
    this.selectedCellType=-1;
}//GEN-LAST:event_startCellButtonMouseClicked

private void finishCellButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_finishCellButtonMouseClicked
    // TODO add your handling code here:
    resetSelectionCell();
    this.finishCellButton.setBackground(Color.red);
    this.selectedCellType=2;
}//GEN-LAST:event_finishCellButtonMouseClicked

private void labyrinthPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labyrinthPanelMouseClicked
      Point p = evt.getPoint();
      
      JOptionPane opPane = new JOptionPane(0);
      opPane.showMessageDialog(labyrinthPanel,"X: "+p.x+ " Y: "+p.y);
      
}//GEN-LAST:event_labyrinthPanelMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton finishCellButton;
    private javax.swing.JButton freeCellButton;
    private javax.swing.JPanel labyrinthPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton startCellButton;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JButton wallCellButton;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
    
    
    
    /**
    * used to reset selected buttons
    */
    public void resetSelectionCell(){
            freeCellButton.setBackground(Color.gray);
            startCellButton.setBackground(Color.gray);
            finishCellButton.setBackground(Color.gray);
            wallCellButton.setBackground(Color.gray);
    }
    
    
    
}

//this class creates a labyrinth representation
class LabyrinthImage extends javax.swing.JPanel {
    
      LabyrinthImage() {
            // set a preferred size for the custom panel.
                   super.setPreferredSize(new Dimension(420,420));
        }
    
    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);

        g.setColor(Color.black);
        
        //desenarea liniior verticale
        for (int i=0; i<=5; i++)
            g.drawRect(10+i*50, 0, 1, 250);
        
        for (int j=0; j<=5; j++)
            g.drawRect(10+0, j*50, 250, 1);
               
    }
    
}

